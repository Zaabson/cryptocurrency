  - Add locktime field to transaction.
  - Swaping the whole of networking with network-transport seems like a good idea. (but a late one)
  - Improve validate functions not to calculate searchPool multiple times. Refactor so that coinbase UTXO is not forgotten about in those functions.
  - Write more extensive block validation tests. Better after the ^ above refactor.
  - Now there's blockchain file to read a starting blockchain from and file to output blockchain after closing the node (not exactly!).
    The blockchain is kept in memory during running time. App should better append new blocks in real time and also
    app should store minimal subset of the whole blockchain in ram. Better not to mess up this in a rush, so this will need to wait. 
  - ReaderT Env IO and HasConfig style constraints on Env  <- nope!
  - Strategy - have all the code that does stuff ready and only then refactor, knowing better what refactor makes sense
  - Some things are recalculated at need (utxopool for nodes in LivelyBlocks). Consider keeping this in memory.
  - Oh! We forgot UTXOPool as part of AppState (possibly).
  - Implement node querying functionality. For now make it dumb and quick only to be able to finaly run node. 
    Also improving it doesn't make sense before blockchain is moved out of runtime and into some database.
  - Wallet
  - Delete unneeded future blocks (can be done based on blockHeight)
  - Fix bug of reading/writing fixed and lively blocks in seperate atomic operations.
  - Change catchUpToBlockchain to be called like log - there's a single queue of catchingUpToBlockchain calls. And really - was the idea of changing to HasConfig-style that undoable?
  - Quiting app, saving blockchain, handling errors.
  - Bug: Updating with block doesn't update UTXOPool - validating the invariant.